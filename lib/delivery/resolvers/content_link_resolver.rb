require 'nokogiri'

module KenticoCloud
  module Delivery
    module Resolvers
      # Locates <a data-item-id=""> tags in content and calls a user-defined method
      # to supply the href for content item links.
      # See https://github.com/Kentico/delivery-sdk-ruby#resolving-links
      class ContentLinkResolver
        def initialize(callback = nil)
          @callback = callback
        end

        # Resolves all links in the content.
        #
        # * *Args*:
        #   - *content* (+string+) The string value stored in the element
        #   - *links* (+Array+) The collection of links from an element's 'links' JSON node
        #
        # * *Returns*:
        #   - +string+ The original content passed, with all links resolved
        def resolve(content, links)
          doc = Nokogiri::HTML.parse(content).xpath('//body')
          links = links.map { |link| ContentLink.new link }
          tags = doc.xpath('//a[@data-item-id]')
          # This line performs the link resolving and replaces the tags in doc
          tags.map { |tag| resolve_tag tag, links }
          doc.inner_html
        end

        private

        # Accepts a tag found in the content and tries to locate matching
        # source link from JSON response. If found, resolves URL and returns
        # the tag with generated HREF.
        #
        # * *Args*:
        #   - *tag* (+string+) A <a data-item-id=""> tag found in the content
        #   - *links* (+Array+) The collection of links from an element's 'links' JSON node, converted to KenticoCloud::Delivery::Resolvers::ContentLink objects
        #
        # * *Returns*:
        #   - +string+ The <a data-item-id=""> tag with an HREF generated by the +provide_url+ method
        def resolve_tag(tag, links)
          matches = links.select { |link| link.id == tag['data-item-id'].to_s }
          url = provide_url matches
          tag['href'] = url
          tag
        end

        # Uses the +resolve_link+ method to generate a URL for a ContentLink
        # object.
        #
        # * *Args*:
        #   - *matches* (+Array+) The ContentLink objects with an ID matching a particular <a data-item-id=""> tag
        #
        # * *Returns*:
        #   - +string+ A url if a link was found in source links, otherwise '/404'
        def provide_url(matches)
          if !matches.empty?
            if @callback.nil?
              resolve_link matches[0]
            else
              @callback.call matches[0]
            end
          else
            '/404'
          end
        end
      end

      # Model for links from the JSON response
      class ContentLink
        attr_accessor :code_name, :type, :url_slug, :id

        # Constructor.
        #
        # * *Args*:
        #   - *link* (+JSON+) One link from an element's 'links' JSON node
        def initialize(link)
          self.id = link[0]
          self.code_name = link[1]['codename']
          self.type = link[1]['type']
          self.url_slug = link[1]['url_slug']
        end
      end
    end
  end
end
